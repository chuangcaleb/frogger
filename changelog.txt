# >>>>>>>>>>>>>>>>>>>>>>>>
# Current Objectives // 460 548
# >>>>>>>>>>>>>>>>>>>>>>>>

- document
- score: bring back highest y
- advance level -> pop up before advance
- onClick to yellow fill

LONG-TERM OBJECTIVES
- README
- high level class diagram
- Javadocs
- Video
X Start Screen w/ picture -> Info button explaining game op
- High Score popup at the end of every round, showing scores from each round, highest at the top
- Refactor code w/ design patterns
X Organize the code to adhere to the MVC pattern
- Create a permanent high score list (using a file to store scores)
- Add interesting levels to the game (either follow the original Frogger game levels or come up with your own ideas)
- Add meaningful JUnit tests
- Use build files (Ant or Maven or Gradle)

! Turtles have to be offset -3 on y-axes
! if player spams downwards on bottom boundary, will misalign with grid because of second animation
! if player does a diagonal combo, the frog will be stuck in second state
! now does not increment by 1

##################################
# 0.11 Level Progression 3/12/20
##################################

New view
- scorepopup .fxml and .css and controller
- new SceneSwitcher method
- refactored Game and Level to accommodate loading of new levels and waiting for popup prompt
- continue button to call Game.nextLevel()

Game and Level
- numEndsActivated counter
- when Game's tick detects 5 ends activated, stops game and pop up high score box
- clicking continue will load the next consecutive level

LevelBuilder
- built three more levels

Game fxml view
- added level number display at top right
- changed some css styles

CollisionHandler
- player will die when stood on an isSunk WetTurtle
- scoring an End will have method call to Level

misc
- fixed water death anim by reimporting death sprites again

##################################
# 0.10 Collision and Death 3/12/20
##################################

- initSprites Death Animation for Frog

CollisionChecker
- is a singleton utility class that checks for collisions every tick.
- stores references to Level's Actors

CollisionHandler
- is a singleton utility class that handles the consequences of collisions.
- handles all collision possibilities

- Restructured Level to init CollisionChecker with Actors at the start of every round

Frog
- added Death sprites to initSprites()
- all Death Sequences
- Respawn Sequence
- rideActor()
- respawn()
- reset()

End
- all implementations

refactor
- moved tick() from Actor to MovableActor

misc
- death pictures were corrupted, reimported them
- reworded some enums of DeathType
- resized FrogEnd.png

###############################
# 0.10 LevelBuilder 2/12/20
###############################

util and Actors
- LevelBuilder is a singleton utility class that builds an ArrayList of AutoActors using LaneBuilder
	- two levels
- renamed LaneConstructor to LaneBuilder
- changed the widths of all the sprites, making sure they're big enough
- refactored the heights and widths measurements out
x tried randomly generating x-positions for autoactors. too much code
- stored AutoActorDims const file, which is referenced by LaneBuilder and Turtle(s) to load sprites
- GRID_SIZE_L (renamed to A_ACTOR_HEIGHT) shaved down to 28
- Frog dimensions shrunk to 22x22
- removed width field from MovableActor

const
- DeathTypes added three more types, as well as comments
- Global added STAGE_WRAP

- deleted frogger.model.view


###############################
# 0.9 Lane Constructor 28/11/20
###############################

- resized End.png from 62x62 to 62x70
- re-downloaded truck1R truck2R.png and /logs
- fixed FilePath to /turtles, removed TurtleAnim4.png
- fixed Turtle and WetTurtle's sprite dimension parameters

- Level.createEnds() to init the End Actors in position

- Level
	> drawAllActors() to only draw the obstacles, since frog and Ends already drawn
	> advanceLevel() skeleton for eventual advancing level
	> tick() for all Actors in Level

- Refactoring the Actor hierarchy to implement the Prototype design pattern
- MovableActor
	> Renamed DynamicActor -> MovableActor
	> only has move() (to remove??)
- AutoActor
	> Renamed Obstacle -> AutoActor
	> prototype constructor
	> abstr clone()
- Each AutoActor (Car, Log, etc) now has a subclass prototype constructor and a clone() that creates a new object from source

- new LaneConstructor singleton utility class that uses Prototype design pattern
	+ since all lanes have the same objects, only differing in x-coordinate
	+ it copies imageLink URL, y-coord height, width, speed (and x-coord, that will be overwritten)
	- initializes lane's y coordinate according to lane number
	- switch case to determine which AutoActor to load from prototype library, besides init the speed
	- configure prototype
	- Clone prototype
	- return arraylist of lane's AutoActors



###############################
# 0.8 JavaFXML and MVC 25/11/20
###############################

- Used SceneBuilder to create game.fxml, home.fxml and info.fxml
- changed SceneSwitcher to pass fxml files instead of Worlds, and uses fxml to load each root, and makes a Scene with that root
- properly made Controller classes to handle events of buttons from the view, that calls switchScene()
- added the Game model to handle the data and logic during the game

- added constant/Global.java to keep track of global variables if they needed to be changed
- renamed act() to tick()

- moved all the images under resources/images ###
- resources/view
- resources/css
- added resources/fonts/EarlyGameboy.ttf for custom fonts
- Removed iKogsKW.png

- commented out Home.java and State.java
- renamed World.java to Level.java


######################################################
# 0.7 Resources, DyanamicActors and Obstacles 23/11/20
######################################################

- Deleted BackgroundImage
- Renamed Actor into DynamicActor and made it inherit a new class called Actor
    > Actor is for all general sprite objects to add into World
    > DynamicActor are for non-static sprites that need to have tick updates and collision checks
- updated Actor, DynamicActor and World to have their declarations and methods to use the new proper class types
    > applied Liskov's Substitution Principle: Actor can be replaced with DynamicActor
- removed the String imageLink parameter for all constructors of the subclasses of Actor, since they all have their own default sprite (except log and car)
- updated the constructors and some FilePaths for obstacles
- animation methods for Turtles
- added class Car.java, similar to Log

- renamed WetTurtles images


#####################################################
# 0.6 Refactored Structure and Frog Movement 20/11/20
#####################################################

REFACTORED STRUCTURE
- removed HomeController and HomeView (they are still there, commented out, if there might be use for them)
- made Main.java call a new class, SceneSwitcher, a singleton that handles switching scenes
- SceneSwitcher has switchScene() which takes a World and sets its Scene for Main.primaryStage, besides assigning event handler for keystrokes to the World
- World has two methods, keyPressed and keyReleased as the event handler methods which calls frog.leap

CONSTANTS
- Direction.java is an enum that keeps the list of cardinal directions
- Keystroke.java is a class that has a HashMap that matches the WASD KeyCode to their direction
- FilePath.java is a class that stores public static final Strings of the filepaths of resources

FROG SPRITES AND MOVEMENT REDESIGNED
- changed Frog's constructor to include starting co-ords and image size
- two new ArrayLists, facingSprites and leapingSprites
- initSprites() loads these arrays with newly instantiated Images
- leap() takes in direction and which key event is coming in
    > handles exceptions
    > switch statement for each scenario
        > checks for ignoring key events that try to escape boundaries

MISC
- added more parameters to Actor's constructor (+ double startX, double startY, int width, int height)
- cleaned up temporary debug code
- general documentation for all affected code


###########################################
# 0.5 First MVC Module and Music 18/11/20
###########################################

- cleaned up Main.java
- under java/frogger, introduced folders const, util, controller and view
- new HomeView.java and HomeController.java to handle main menu page display and logic respectively (according to MVC pattern)
- Refactored out MyStage
    > HomeView to handle its World extension
    > MusicPlayer to handle music methods

- new MusicPlayer.java as a singleton to handle background music
    > Instead of singleton object, made it as singleton class
- Renamed main/resources/frogger/sound folder to music


###########################################
# 0.4 Frog Movement and Cleanup 16/11/20
###########################################

- Actor.java
    > STAGE_HEIGHT and STAGE_WIDTH constants
    > Javadoc comments
- Animal.java
    > Javadoc comments
    > WATER_HEIGHT
    > GRID_UNIT_L
    > changed rebound value from 2*movement to just movement. Follows the grid.
    > player rebounds on top and bottom boundary
    ! if player spams downwards on any boundary, will misalign with grid because of second animation
- Refactored Animal class renamed to Frog
- Main.java: Renamed animal to frog


###########################################
# 0.3 Element Sizes 15/11/20
###########################################

- resize scene/stage to have a proper grid-like pattern
    H: 40 + 32 + 5*32=160 + 32 + (2+32+2)*5=180 + 52 + 52 == 548
    W: 22 + 13*32 + 22 = 460
- Resized GameBackground.png
- Animal.java
    > both movement directions to have speed of 17
    > static final int for starting coordinates
>> Still need to do boundary wrap checking and fitting


###########################################
# 0.2 Project Workspace Cleanup 15/11/20
###########################################

- updated .gitignore and removed .DS_Store from repo. Hope it works
- set up resource file, and added frogger subfolder
    > refactored code to accommodate subfolder
- deleted (java)docs folder
- renamed changelog file
- cleaned up Main.java file's obstacle bulk



###########################################
# 0.1 Javadocs and File Structure 13/11/20
###########################################

- javadocs 'docs' folder
- file structure reorganisation according to MVC pattern
    > made src/java/frogger as source root directory
    > put all the non-java files into "resources" folder
        > further sub-categorized according to resource type
    > Refactored links/path of methods that use resources
- resized GameBackground to 600x800
- deleted redundant files
    > old README.md
    > frog background-20170521-151438.piskel
    > smiiling-big-eyed-green-frog-clipart-6926.jpg
    > small-red-car-3858-0.png
    > frog background.png
    > icon-frogger-pixel-512x512.png
    > arcade.png



#########################
# Initial Commit 12/11/20
#########################

- set up workspace
- build files folder
- ensured build files



# UI Ideas

> Enter Name?

Main Menu
> Play
    > Difficulty Select
> Info
> Toggle Music/Sound
> High Scores
> Quit

Death Screen
> Score
> Play Again
> Main Menu